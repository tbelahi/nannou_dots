/*
 * Simple Loop example with 4D noise
 * Daily Sketch 2019/09/23 by Alexis Andre (@mactuitui)
 *
 * Demonstration of looping an animation using periodic functions.
 *
 */

use nannou::noise::*;
use nannou::prelude::*;

fn main() {
    nannou::app(model).run();
}

struct Model {
    noise: Perlin,
}

fn model(app: &App) -> Model {
    let _window = app
        .new_window()
        .size(1024, 1024)
        .view(view)
        .build()
        .unwrap();

    let mut noise = Perlin::new();
    noise = noise.set_seed(1);
    Model { noise }
}

fn view(app: &App, model: &Model, frame: Frame) {
    // Prepare to draw.
    let draw = app.draw();
    draw.background().color(PAPAYAWHIP);

    //the loop is going to be 200 frames long
    let frac = (app.elapsed_frames() % 200) as f32 / (200.0);

    //we'll rotate in the noise space
    let rotcos = 0.2 * (frac * TAU).cos();
    let rotsin = 0.2 * (frac * TAU).sin();

    //draw the lines
    let n_lines = 100;
    let n_points = 200;
    for j in 0..n_lines {
        let frac_j = (j as f32) / (n_lines as f32 - 1.0);
        let mut pts = Vec::new();
        let mut pts2 = Vec::new();
        for i in 0..n_points {
            let frac_i = (i as f32) / ((n_points - 1) as f32);

/*             let scale = if j % 2 == 0 {
                ((frac_i * PI).sin()).powf(3.0)
            } else {
                ((frac_i * PI).cos()).powf(3.0)
            }; */
            let scale = ((frac_i * PI).sin()).powf(3.0);

            let offset = scale
                * (model.noise.get([
                    i as f64 * 0.03,
                    j as f64 * 0.5,
                    rotcos as f64,
                    rotsin as f64,
                ]) * 0.5
                    + 0.5) as f32;

            pts.push(vec2(
                -512.0 + frac_i * 1024.0,
                342.0 - frac_j * 824.0 + 160.0 * offset,
            ));
            pts2.push(vec2(
                -512.0 + frac_i * 1024.0,
                342.0 - frac_j * 824.0 + 160.0 * offset,
            ));
        }
        //fill the line with black
        draw.polygon().color(DARKSLATEGRAY).points(pts);
        //draw the white outline on top
        draw.polyline()
            .color(LIGHTSKYBLUE)
            .stroke_weight(4.0)
            .points(pts2);
    }

    draw.to_frame(app, &frame).unwrap();
}
